services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
    ports:
      - "${ZOOKEEPER_CLIENT_PORT}:${ZOOKEEPER_CLIENT_PORT}"

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  spark:
    image: bitnami/spark:latest
    environment:
      - SPARK_MODE=master
    ports:
      - "${SPARK_MASTER_PORT}:${SPARK_MASTER_PORT}"
      - "${SPARK_WEB_UI_PORT}:${SPARK_WEB_UI_PORT}"

  superset:
    image: apache/superset
    ports:
      - ${SUPERSET_PORT}:${SUPERSET_PORT}
    environment:
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY}
    depends_on:
      - spark
    command: >
      /bin/bash -c "
        superset db upgrade &&
        superset fab create-admin --username ${SUPERSET_ADMIN_USERNAME} --firstname Admin --lastname User --email ${SUPERSET_ADMIN_EMAIL} --password ${SUPERSET_ADMIN_PASSWORD} &&
        superset init &&
        superset run -h 0.0.0.0 -p 8088"

  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  nifi:
    image: apache/nifi:2.3.0
    ports:
      - "${NIFI_HTTPS_PORT}:${NIFI_HTTPS_PORT}"
    environment:
      NIFI_WEB_HTTPS_PORT: ${NIFI_HTTPS_PORT}
    volumes:
      - nifi_data:/opt/nifi/data

  dashboard:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8050:8050"
    environment:
      - PYTHONUNBUFFERED=1
      - API_BASE_URL=http://backend:8000/api/v1
      - KAFKA_BOOTSTRAP_SERVERS=kafka:${KAFKA_PORT}
    depends_on:
      - kafka
      - backend
    command: ["python3", "stock_dashboard.py"]

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:${KAFKA_PORT}
    depends_on:
      - postgres
      - kafka
    command: ["python3", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]

volumes:
  postgres_data:
  nifi_data: